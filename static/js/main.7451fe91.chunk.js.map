{"version":3,"sources":["store/MultiviewMainStore.jsx","components/multiview_main/MultiviewMainHeader.jsx","components/multiview_main/MultiviewMainNavigation.jsx","components/multiview_main/MultiviewMainTable.jsx","components/multiview_main/MultiviewMain.jsx","App.js","serviceWorker.js","index.js"],"names":["initState","multiviews","layoutId","layoutType","title","resourceId","selectedMultiview","store","createStore","state","action","newState","undefined","type","concat","Object","assign","newMultiviews","window","__REDUX_DEVTOOLS_EXTENSION__","MultiviewMainHeader","Component","MultiviewMainNavigation","MultiviewMainTable","PropTypes","string","listener","getState","setState","subscribe","this","MultiviewMain","getMultiviewList","json","JSON","stringify","data","response","console","log","dispatch","App","React","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"4RAEIA,EAAY,CACZC,WAAY,CAAC,CAAEC,SAAU,GAAIC,WAAY,GAAIC,MAAO,GAAIC,WAAY,KACpEC,kBAAmB,KA2BRC,EAFHC,aAtBE,SAAUC,EAAOC,GAC3B,IAAIC,EACJ,QAAcC,IAAVH,EACA,OAAOT,EACJ,GAAoB,qBAAhBU,EAAOG,KAA6B,CAC3C,IAAIZ,EAAaS,EAAOT,WAAWa,SAEnCH,EAAWI,OAAOC,OAAO,GAAIP,EAAO,CAChCR,WAAYA,EACZK,kBAAmBG,EAAMH,yBAE1B,GAAoB,6BAAhBI,EAAOG,KAAqC,CACnD,IAAII,EAAgBP,EAAOT,WAAWa,SAEtCH,EAAWI,OAAOC,OAAO,GAAIP,EAAO,CAChCR,WAAYgB,EACZX,kBAAmBI,EAAOJ,oBAIlC,OAAOK,IAEsBO,OAAOC,8BAAgCD,OAAOC,gC,OCpBhEC,E,uKAJP,OAAS,6BAAK,2C,GAFYC,aCMnBC,E,uKAJP,OAAQ,6BAAK,+C,GAFiBD,a,wBC+BvBE,E,4MA5BXd,MAAQ,CACJR,WAAY,CAAC,CAAEC,SAAU,GAAIC,WAAY,GAAIC,MAAO,GAAIC,WAAY,KACpEC,kBAAmBkB,IAAUC,Q,EAIjCC,SAAW,WACP,IAAIf,EAAWJ,EAAMoB,WACrB,EAAKC,SAAL,2BAAkB,EAAKnB,OAAvB,IAA8BE,e,kEAI9BJ,EAAMsB,UAAUC,KAAKJ,UAGrBI,KAAKJ,a,+BAML,OAAQ,kC,GAtBiBL,aC+BlBU,E,4MA3BbC,iBAAmB,WACjB,IAAMC,EAAOC,KAAKC,UAAUC,EAAKC,UACjCC,QAAQC,IAAI,CAAEN,SAEd1B,EAAMiC,SAAS,CACb3B,KAAM,mBACNZ,WAAYmC,EAAKC,Y,mEAKnBP,KAAKE,qB,+BAKL,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GAtBoBX,aCIboB,E,uKAJX,OAAO,kBAAC,EAAD,U,GAHOC,IAAMrB,WCQJsB,QACW,cAA7BzB,OAAO0B,SAASC,UAEe,UAA7B3B,OAAO0B,SAASC,UAEhB3B,OAAO0B,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrB,QAAQqB,MAAMA,EAAMC,a","file":"static/js/main.7451fe91.chunk.js","sourcesContent":["import { createStore } from \"redux\";\n\nvar initState = {\n    multiviews: [{ layoutId: \"\", layoutType: \"\", title: \"\", resourceId: \"\" }],\n    selectedMultiview: \"1\",\n};\n\nvar reducer = function (state, action) {\n    var newState;\n    if (state === undefined) {\n        return initState;\n    } else if (action.type === \"GetMultiviewList\") {\n        var multiviews = action.multiviews.concat();\n\n        newState = Object.assign({}, state, {\n            multiviews: multiviews,\n            selectedMultiview: state.selectedMultiview\n        });\n    } else if (action.type === \"SelectedMultiviewChanged\") {\n        var newMultiviews = action.multiviews.concat();\n\n        newState = Object.assign({}, state, {\n            multiviews: newMultiviews,\n            selectedMultiview: action.selectedMultiview\n        });\n    }\n\n    return newState;\n};\nvar store = createStore(reducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__())\n    ;\nexport default store;","import React, { Component } from \"react\";\n\n\nclass MultiviewMainHeader extends Component {\n    render() {\n        return  (<div><h1>Header</h1></div>);\n    }\n}\n\nexport default MultiviewMainHeader;","import React, { Component } from \"react\";\n\n\nclass MultiviewMainNavigation extends Component {\n    render() {\n        return (<div><p1>Navigation</p1></div>);\n    }\n}\n\nexport default MultiviewMainNavigation;","\nimport React, { Component } from \"react\";\nimport store from \"../../store/MultiviewMainStore\";\nimport PropTypes from \"prop-types\";\n\nclass MultiviewMainTable extends Component {\n    state = {\n        multiviews: [{ layoutId: \"\", layoutType: \"\", title: \"\", resourceId: \"\" }],\n        selectedMultiview: PropTypes.string\n    };\n\n\n    listener = () => {\n        var newState = store.getState();\n        this.setState({...this.state, newState});\n    }\n\n    componentDidMount() {\n        store.subscribe(this.listener);\n\n\n        this.listener();\n    }\n\n\n    render() {\n\n        return (<div></div>);\n\n\n\n    }\n}\n\nexport default MultiviewMainTable;","import React, { Component } from \"react\";\nimport store from \"../../store/MultiviewMainStore\";\nimport data from '../../test/GetMultiviewList.json';\nimport MultiviewMainHeader from './MultiviewMainHeader';\nimport MultiviewMainNavigation from './MultiviewMainNavigation';\nimport MultiviewMainTable from './MultiviewMainTable';\n\nclass MultiviewMain extends Component {\n\n  getMultiviewList = () => {\n    const json = JSON.stringify(data.response);\n    console.log({ json });\n\n    store.dispatch({\n      type: \"GetMultiviewList\",\n      multiviews: data.response,\n    });\n  };\n\n  componentWillMount() {\n    this.getMultiviewList()\n  }\n\n  render() {\n\n    return (\n      <div>\n        <MultiviewMainNavigation></MultiviewMainNavigation>\n        <MultiviewMainHeader></MultiviewMainHeader>\n        <MultiviewMainTable></MultiviewMainTable>\n      </div>\n    );\n  }\n\n}\n\nexport default MultiviewMain;","import React from \"react\";\nimport \"./App.css\";\nimport MultiviewMain from \"./components/multiview_main/MultiviewMain\";\n\nclass App extends React.Component {\n  \n  render() {\n    return <MultiviewMain></MultiviewMain>;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}